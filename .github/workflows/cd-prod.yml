name: "Delivery Contínuo - PROD"
on:
  push:
    branches:
      - "main"
jobs:
  testes-unitarios:
    name: "Testes unitários"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Configura Java 17"
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: "Permissiona a execução do ./gradlew"
        run: chmod +x ./gradlew
      - name: "Executa os testes"
        run: ./gradlew test --info

  analise-estatica:
    name: "Análise Estática - Sonar Cloud"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Configura Java 17"
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: "Adiciona cache aos pacotes do Sonar"
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: "Adiciona cache aos pacotes do Gradle"
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: "Permissiona a execução do ./gradlew"
        run: chmod +x ./gradlew
      - name: "Executa o build e analisa o código"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar -x test --info

  build:
    name: "Executa o build"
    runs-on: ubuntu-latest
    needs: [testes-unitarios, analise-estatica]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Configura Java 17"
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: "Permissiona a execução do ./gradlew"
        run: chmod +x ./gradlew
      - name: "Executa o build"
        run: ./gradlew build -x test --info

  deploy-eks:
    name: "Entrega a versão no EKS - PROD"
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Configura as credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: "Configura o Kubectl"
        uses: Azure/setup-kubectl@v4.0.0
      - name: "Configura o kubectl para o EKS"
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-fiap-fastfood-prod
      - name: "Injeta os secrets"
        run: |
          sed -i "s/{{DB_HOSTNAME_KEY}}/${{ secrets.DATABASE_HOST_PROD }}/g" ./deploy/prod/app/app-secret.yml 
          sed -i "s/{{DB_PORT_KEY}}/${{ secrets.DATABASE_PORT_PROD }}/g" ./deploy/prod/app/app-secret.yml 
          sed -i "s/{{DB_USERNAME_KEY}}/${{ secrets.DATABASE_USERNAME_PROD }}/g" ./deploy/prod/app/app-secret.yml 
          sed -i "s/{{DB_PASSWORD_KEY}}/${{ secrets.DATABASE_PASSWORD_PROD }}/g" ./deploy/prod/app/app-secret.yml
          sed -i "s/{{API_GATEWAY_URL}}/${{ secrets.API_GATEWAY_URL_PROD }}/g" ./deploy/prod/app/app-secret.yml
      - name: "Injeta a versão no deployment"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export VERSION=$(git tag | sort -V | tail -n 1)
          sed -i "s/{{VERSION}}/$(echo -n ${VERSION})/g" ./deploy/prod/app/app-deployment.yml
      - name: "Aplica os arquivos do K8S no EKS"
        run: |
          kubectl apply \
           -f ./deploy/prod/app/app-secret.yml \
           -f ./deploy/prod/app/app-deployment.yml \
           -f ./deploy/prod/app/app-service-loadbalancer.yml \
           -f ./deploy/prod/app/app-hpa.yml
